---
# 1. Check if using a private or signed ingress cert
# -----------------------------------------------------------------------------
- name: Clear private_root_ca_name fact
  ansible.builtin.set_fact:
    private_root_ca_name: ""
    include_cluster_ingress_cert_chain: "{{ lookup('env', 'INCLUDE_CLUSTER_INGRESS_CERT_CHAIN') | default('false', True) | bool }}"

- name: "Lookup Proxy: cluster"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Proxy
    name: cluster
  register: cluster_proxy_lookup

- name: Set private_root_ca_name fact
  ansible.builtin.set_fact:
    private_root_ca_name: "{{ cluster_proxy_lookup.resources[0].spec.trustedCA.name }}"
  when:
    - cluster_proxy_lookup is defined
    - cluster_proxy_lookup.resources | length == 1
    - cluster_proxy_lookup.resources[0].spec.trustedCA.name is defined

# 2. If no private CA is found then run the get_signed_ingress task
# -----------------------------------------------------------------------------
- name: "Get signed ingress certificates (no private CA found)"
  ansible.builtin.include_tasks: "get_signed_ingress_cert.yml"
  when: private_root_ca_name == ""

# 3. If private CA is found then run then use it instead of a signed one
# -----------------------------------------------------------------------------
- name: Private Root CA name is defined
  when: private_root_ca_name != ""
  block:
    - name: "Lookup ConfigMap: {{ private_root_ca_name }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        name: "{{ private_root_ca_name }}"
        namespace: openshift-config
      register: private_root_ca_lookup

    - name: "Check ca-bundle.crt is defined"
      ansible.builtin.assert:
        that:
          - private_root_ca_lookup.resources[0].data['ca-bundle.crt'] is defined
          - private_root_ca_lookup.resources[0].data['ca-bundle.crt'] != ""
        fail_msg: "Private Root CA ConfigMap {{ private_root_ca_name }} does not have 'ca-bundle.crt' defined"

    - name: Set private_root_ca_bundle_crt fact
      ansible.builtin.set_fact:
        private_root_ca_bundle_crt: "{{ private_root_ca_lookup.resources[0].data['ca-bundle.crt'] }}"

    # Break up the certificate into an array
    - name: "Get private ingress certificate (full)"
      ansible.builtin.set_fact:
        cluster_ingress_tls_crt_full: "{{ private_root_ca_bundle_crt | regex_findall('(?s)(-----BEGIN .+?-----.+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

    # We only want the first part of this certificate, I don't know why, but this is what works - if needed, set include_cluster_ingress_cert_chain == true to have entire cert chain
    - name: "Get private ingress certificate"
      ansible.builtin.set_fact:
        cluster_ingress_tls_crt: "{{ cluster_ingress_tls_crt_full if (include_cluster_ingress_cert_chain) else cluster_ingress_tls_crt_full[0] }}"

    # When the certificate content is retrieved as a list, need to ensure its content is not treated as a list of characters
    - name: "Format all certificates in the chain (from list)"
      ansible.builtin.set_fact:
        cluster_ingress_tls_crt: "{{ cluster_ingress_tls_crt | join('') }}"
      when: cluster_ingress_tls_crt and cluster_ingress_tls_crt | type_debug == 'list' and cluster_ingress_tls_crt | length > 0

    # When the certificate content is retrieved as a string, need to filter its content into valid certificates and map them into a list
    - name: "Format all certificates in the chain (from text/string)"
      ansible.builtin.set_fact:
        cluster_ingress_tls_crt: "{{ cluster_ingress_tls_crt | regex_findall('(?s)(-----BEGIN .+?-----.+?-----END .+?-----)', multiline=True, ignorecase=True) }}"
      when: cluster_ingress_tls_crt and cluster_ingress_tls_crt | type_debug != 'list'
