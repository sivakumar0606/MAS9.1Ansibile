apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cert-manager-webhook-ibm-cis"
  namespace: "{{ cert_manager_namespace }}"
  labels:
    app: "cert-manager-webhook-ibm-cis"

---
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: "{{ cert_manager_namespace }}"
  name: "cert-manager-webhook-ibm-cis"
  labels:
    app: "cert-manager-webhook-ibm-cis"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "cert-manager-webhook-ibm-cis"
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "cert-manager-webhook-ibm-cis"
    namespace: {{ cert_manager_namespace }}

---
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "cert-manager-webhook-ibm-cis"
  namespace: "{{ cert_manager_namespace }}"
  labels:
    app: "cert-manager-webhook-ibm-cis"
rules:
  - apiGroups:
      - ''
    resources:
      - 'secrets'
    verbs:
      - 'get'

---
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "cert-manager-webhook-ibm-cis:webhook-authentication-reader"
  namespace: kube-system
  labels:
    app: "cert-manager-webhook-ibm-cis"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "cert-manager-webhook-ibm-cis"
    namespace: "{{ cert_manager_namespace }}"

---
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "cert-manager-webhook-ibm-cis:auth-delegator"
  labels:
    app: "cert-manager-webhook-ibm-cis"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "cert-manager-webhook-ibm-cis"
    namespace: "{{ cert_manager_namespace }}"

---
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "cert-manager-webhook-ibm-cis:domain-solver"
  labels:
    app: "cert-manager-webhook-ibm-cis"
rules:
  - apiGroups:
      - "{{ cis_apiservice.group_name }}"
    resources:
      - '*'
    verbs:
      - 'create'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "cert-manager-webhook-ibm-cis:domain-solver"
  labels:
    app: "cert-manager-webhook-ibm-cis"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "cert-manager-webhook-ibm-cis:domain-solver"
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "{{ cert_manager_service_account }}"
    namespace: "{{ cert_manager_namespace }}"
