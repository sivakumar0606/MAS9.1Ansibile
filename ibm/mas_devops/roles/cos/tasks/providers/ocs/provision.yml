---
# 1. Check if the ocs is installed
# ----------------------------------------------------------------------------
- name: "Get OCS cluster "
  kubernetes.core.k8s_info:
    api_version: ocs.openshift.io/v1
    kind: StorageCluster
    namespace: "openshift-storage"
  register: SCluster

- name: "OCS cluster status"
  when: SCluster.resources| length != 0
  set_fact:
    ocsavailable: '{% if SCluster.resources[0].status.phase == "Ready" %}True{% else %}False{% endif %}'

- name: "Fail if OCS Cluster is not provided"
  assert:
    that: ocsavailable is defined and ocsavailable
    fail_msg: "OCS Cluster is not ready, pls install OCS first."

- name: "Print If there's OCS cluster"
  debug:
    msg:
      - "OCS Cluster is available .... {{ ocsavailable }}"

# 2. Create the object store
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Create objectstore in OSC Cluster"
  when: ocsavailable is defined and ocsavailable
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/ocs/object.yaml') }}"

# 3. Create the object User
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Create objectstore User"
  when: ocsavailable is defined and ocsavailable
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/ocs/objectuser.yaml') }}"

- name: "Wait for Ceph os user to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: ceph.rook.io/v1
    name: object
    namespace: "openshift-storage"
    kind: CephObjectStoreUser
  register: cephobjectuser_result
  until: cephobjectuser_result.resources[0].status.phase is defined and cephobjectuser_result.resources[0].status.phase == "Ready"
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 4. Set up the domain name for object storage route
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Get cluster subdomain"
  when: ocsavailable is defined and ocsavailable
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "ocs/objectstorage : Configure domain"
  when: ocsavailable is defined and ocsavailable
  set_fact:
    cos_domain: "rgw-openshift-storage.{{ _cluster_subdomain.resources[0].spec.domain }}"

# 5. Create route for cos
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Create objectstore route"
  when: ocsavailable is defined and ocsavailable
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/ocs/rgw.yaml') }}"

# 6. Query the object User crdential
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Lookup if cos user secret is there"
  when: ocsavailable is defined and ocsavailable
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "rook-ceph-object-user-object-object"
    namespace: "openshift-storage"
  register: objectuserSecret

# 7. Query the tls for object route
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Lookup the default cluster ingress secret"
  include_tasks: "{{ role_path }}/../../common_tasks/get_ingress_cert.yml"

# Not sure why we do this manipulation on the certificate content, whoever wrote
# this originally should really have put a comment in here explaining why this
# is necessary :)
- name: "ocs/objectstorage : Set COS cert variable"
  set_fact:
    ocscos_tls_crt: "{{ cluster_ingress_tls_crt }}"

# Load uds_certs template to dynamically set as many uds certificates as identified
- set_fact:
    ocscos_certs: "{{ lookup('ansible.builtin.template', 'templates/ocs/ocs-certs.yml.j2') }}"
  when:
    - ocscos_tls_crt is defined
    - ocscos_tls_crt | length > 0

- name: "ocs/objectstorage : Query cos secret based on existing secret/cm"
  when:
    - ocsavailable is defined and ocsavailable
    - objectuserSecret.resources| length != 0
  set_fact:
    ocscos_url: "https://{{ cos_domain }}"
    ocscos_username: "{{ objectuserSecret.resources[0]['data']['AccessKey']| b64decode }}"
    ocscos_password: "{{ objectuserSecret.resources[0]['data']['SecretKey']| b64decode }}"

# 8. Provide debug information and create coscfg.yml
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Debug information"
  block:
    - name: Get the Cos
      debug:
        msg:
          - "cos url ........................ {{ ocscos_url }}"
          - "cos username/accesskey ......... {{ ocscos_username }}"
          - "cos password/secretkey ......... {{ ocscos_password }}"
  rescue:
    - name: Fail as we didn't get the cos info in ocs cluster.
      fail:
        msg: "we didn't get the cos info here in ocs cluster."

# 9. Write ObjectStorageCfg to disk
# -----------------------------------------------------------------------------
- name: "ocs/objectstorage : Copy objectstorageCfg to filesytem"
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  ansible.builtin.template:
    src: ocs/objectstoragecfg.yml.j2
    dest: "{{ mas_config_dir }}/cos-ocs-system.yml"
    mode: "664"
