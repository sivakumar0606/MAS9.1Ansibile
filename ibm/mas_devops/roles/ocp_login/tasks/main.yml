---
# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if type is not provided"
  assert:
    that: (cluster_type is defined and cluster_type != "" and cluster_name is defined and cluster_name != "") or (ocp_token is defined and ocp_token != "" and  ocp_server is defined and ocp_server != "")
    fail_msg: "cluster_type & cluster_name, or ocp_token and ocp_server properties must be provided"


# 2. Provide debug info
# -----------------------------------------------------------------------------
- debug:
    msg:
      - "Cluster name ................. {{ cluster_name | default('<undefined>', true) }}"
      - "Cluster type ................. {{ cluster_type | default('<undefined>', true) }}"
      - "OCP server ................... {{ ocp_server | default('<undefined>', true) }}"


# 3. Perform login using cluster specific login
# -----------------------------------------------------------------------------
- include_tasks: "tasks/login-{{ cluster_type }}.yml"
  when:
    - cluster_type != 'in-cluster'
    - ocp_token is not defined or ocp_token == ""
    - ocp_server is not defined or ocp_server == ""

# 4. Perform login using generic ocp token
# -----------------------------------------------------------------------------
- include_tasks: "tasks/login.yml"
  when:
    - cluster_type != 'in-cluster'
    - ocp_token is defined and ocp_token != ""
    - ocp_server is defined and ocp_server != ""
