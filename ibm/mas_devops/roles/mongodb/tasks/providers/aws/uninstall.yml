---
- name: Fail if var docdb_cluster_name not provided for DocDB provisioning
  assert:
    that: docdb_cluster_name is defined and docdb_cluster_name != ''
    fail_msg: "docdb_cluster_name property is required"

- name: Fail if var vpc_id not provided for DocDB provisioning
  assert:
    that: vpc_id is defined and vpc_id != ''
    fail_msg: "vpc_id property is required"

- name: Fail if required vars for DocDB not provided
  assert:
    that:
      - docdb_cidr_az1 is defined and docdb_cidr_az1 != ''
      - docdb_cidr_az2 is defined and docdb_cidr_az2 != ''
      - docdb_cidr_az3 is defined and docdb_cidr_az3 != ''
    fail_msg: "Missing one or more of following properties: docdb_cidr_az1,docdb_cidr_az2,docdb_cidr_az3"

- name: "Debug properties, Provider: {{ mongodb_provider }} Action: {{mongodb_action}}"
  debug:
    msg:
      - "VPC ID ................................. {{ vpc_id }}"
      - "DocumentDB Cluster Name ................ {{ docdb_cluster_name }}"
      - "DocumentDB Instance Name Prefix ........ {{ docdb_instance_identifier_prefix }}"
      - "Number of Instances for DocumentDB ..... {{ docdb_instance_number }}"
      - "DocumentDB Instance Class .............. {{ docdb_instance_class }}"
      - "DocumentDB Engine Version .............. {{ docdb_engine_version }}"
      - "DocumentDB Subnet Group Name ........... {{ docdb_subnet_group_name }}"
      - "DocumentDB Security Group Name ......... {{ docdb_security_group_name }}"
      - "CIDR Block for Subnet 1 ................ {{docdb_cidr_az1}}"
      - "CIDR Block for Subnet 2 ................ {{docdb_cidr_az2}}"
      - "CIDR Block for Subnet 3 ................ {{docdb_cidr_az3}}"

# 1. Delete DocumentDB Cluster and Instances
# -----------------------------------------------------------------------------
- name: Delete all docdb instances
  command: >
    aws docdb delete-db-instance \
      --db-instance-identifier '{{ docdb_instance_identifier_prefix }}'-'{{ item }}'
  register: docdb_delete_info
  with_sequence: start=1 end={{docdb_instance_number}}
  until: ('DBInstanceNotFound' in docdb_delete_info.stderr)
  retries: 30
  delay: 60 # seconds
  failed_when: docdb_delete_info.rc not in [0] and ('DBInstanceNotFound' not in docdb_delete_info.stderr ) and ('InvalidDBInstanceState' not in docdb_delete_info.stderr)

- name: Delete DocDB Cluster
  command: >
    aws docdb delete-db-cluster \
    --db-cluster-identifier '{{ docdb_cluster_name }}'
    --skip-final-snapshot
  register: docdb_cluster_delete_info
  until: ('DBClusterNotFoundFault' in docdb_cluster_delete_info.stderr)
  retries: 30
  delay: 60 # seconds
  failed_when: docdb_cluster_delete_info.rc not in [0] and ('DBClusterNotFoundFault' not in docdb_cluster_delete_info.stderr )

# 2. Wait untill DocDB instances are deleted and then Delete Subnet Group
# -----------------------------------------------------------------------------
- name: Delete Subnet Group for DocDB Instance
  command: >
    aws docdb delete-db-subnet-group \
    --db-subnet-group-name '{{ docdb_subnet_group_name }}'
  register: subnet_group_delete_info
  until: ('DBSubnetGroupNotFoundFault' in subnet_group_delete_info.stderr) or (subnet_group_delete_info is defined and subnet_group_delete_info.stderr == "")
  retries: 30
  delay: 60 # seconds
  failed_when: subnet_group_delete_info.rc not in [0] and ('DBSubnetGroupNotFoundFault' not in subnet_group_delete_info.stderr )

# 3. Delete all three subnets in VPC
# -----------------------------------------------------------------------------
- name: Fetch Subnets already exists in VPC {{ vpc_id }}
  loop: ["{{docdb_cidr_az1}}", "{{docdb_cidr_az2}}", "{{docdb_cidr_az3}}"]
  command: >
    aws ec2 describe-subnets \
      --filters "Name=cidr, Values={{item}}" "Name=vpc-id,Values={{ vpc_id }}" "Name=tag:Name,Values={{ docdb_cluster_name }}"
  register: subnets_info

- name: Initialize Subnet Ids list
  set_fact:
    subnets: []

- name: Set Fact for fecthed Subnets
  loop: "{{ subnets_info.results }}"
  set_fact:
    subnets: "{{ subnets + [item.stdout | from_json | json_query('Subnets') ] }}"

- name: Delete all subnets for DocDB
  loop: "{{ subnets }}"
  command: >
    aws ec2 delete-subnet \
      --subnet-id '{{ item[0].SubnetId }}'
  register: subnet_delete_info
  when: item | length > 0
  failed_when: subnet_delete_info.rc not in [0] and ('DependencyViolation' not in subnet_delete_info.stderr )

# 4. Delete Security Group
# -----------------------------------------------------------------------------
- name: Fetch Security Group {{ docdb_security_group_name }} Info in vpc {{vpc_id}}
  command: >
    aws ec2 describe-security-groups \
      --filters "Name=vpc-id,Values='{{ vpc_id }}'" "Name=group-name,Values='{{ docdb_security_group_name }}'"
  register: sg_info

- name: Set Fact , Security Group Id
  set_fact:
    sg_group_id: "{{sg_info.stdout | from_json | json_query('SecurityGroups[0].GroupId')}}"

- name: Delete Security Group for DocDb Instance
  when: sg_group_id is defined and sg_group_id != ''
  command: >
    aws ec2 delete-security-group \
    --group-id '{{ sg_group_id }}'
  register: sg_delete_info
  failed_when: sg_delete_info.rc not in [0] and ('DependencyViolation' not in sg_delete_info.stderr )
