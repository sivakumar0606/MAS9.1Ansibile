---

- name: Check that required properties have been set
  assert:
    that:
      - registry_username is defined and registry_username != ""
      - registry_password is defined and registry_password != ""

# 1. Create the TLS certificates
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- name: "Create Namespace"
  kubernetes.core.k8s:
    template: 'templates/namespace.yml.j2'

- name: "Create internal CA certificate issuer"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/certs/ca_issuer.yml.j2'
  register: createCaIssuer

- name: "Create and wait for CA certificate"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/certs/ca_certificate.yml.j2'
    wait: yes
    wait_timeout: 600 #10 minutes
    wait_condition:
      type: Ready
      status: True
  register: createCaCert

- name: "Create certificate issuer"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/certs/issuer.yml.j2'
  register: createIssuer

- name: "Create registry certificate"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/certs/certificate.yml.j2'
  register: createCertificate


# 2. Create the authentication secret
# -----------------------------------------------------------------------------
- name: Generate htpasswd
  shell: "htpasswd -Bbn {{ registry_username }} {{ registry_password }}"
  register: htpasswd_result

- name: "Generated htpasswd content"
  debug:
    msg: "{{ htpasswd_result.stdout }}"

- name: "Create authentication secret"
  vars:
    registry_htpasswd: "{{ htpasswd_result.stdout }}"
  kubernetes.core.k8s:
    template: "templates/auth-secret.yml.j2"


# 3. Create the deployment
# -----------------------------------------------------------------------------
- name: "Configure storage classes"
  include_tasks: tasks/setup/determine-storage-classes.yml

- name: "Create PVC"
  kubernetes.core.k8s:
    template: 'templates/pvc.yml.j2'

- name: "Create Deployment"
  kubernetes.core.k8s:
    template: 'templates/deployment.yml.j2'

# TODO: We need to wait for this to exist
- name: "Lookup certificate"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: airgap-registry-certificate
    namespace: "{{ registry_namespace }}"
  register: cert_secret
  retries: 60 # ~approx 5 minutes before we give up
  delay: 5 # seconds
  until:
    - cert_secret.resources is defined
    - cert_secret.resources | length > 0

- name: "Create Directory (/tmp/{{ cluster_subdomain.resources[0].spec.domain }}:32500)"
  ansible.builtin.file:
    path: "/tmp/{{ cluster_subdomain.resources[0].spec.domain }}:32500"
    state: directory

- name: "Write certificate to disk"
  copy:
    content: "{{ cert_secret.resources[0].data['ca.crt'] | b64decode }}"
    dest: "/tmp/{{ cluster_subdomain.resources[0].spec.domain }}:32500/ca.crt"

# 4. Set up service
# -----------------------------------------------------------------------------
- name: "Create Service"
  kubernetes.core.k8s:
    template: "templates/service-{{ registry_service_type }}.yml.j2"

- name: "Connection Information"
  debug:
    msg:
      - "Registry Hostname ...................... {{ cluster_subdomain.resources[0].spec.domain }}"
      - "registry Port .......................... 32500"
      - "Registry Username ...................... {{ registry_username }}"
      - "Registry Password ...................... {{ registry_password }}"
      - "Registry CA certificate ................ /tmp/{{ cluster_subdomain.resources[0].spec.domain }}:32500/ca.crt"
      - "  Install the certificate:"
      - "  mv \"/tmp/{{ cluster_subdomain.resources[0].spec.domain }}:32500\" \"/etc/docker/certs.d/{{ cluster_subdomain.resources[0].spec.domain }}:32500\""
      - "Login Command .......................... docker login {{ cluster_subdomain.resources[0].spec.domain }}:32500"
