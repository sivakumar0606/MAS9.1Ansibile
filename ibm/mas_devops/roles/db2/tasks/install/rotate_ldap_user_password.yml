# 2. Get the pod name of the db2 local LDAP
# -----------------------------------------------------------------------------
- name: "Lookup db2 ldap Pod in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2_namespace }}"
    label_selectors:
      - app={{ db2_instance_name | lower}}
      - role=ldap
  register: db2_ldap_pod

- name: Set facts for LDAP pod name
  set_fact:
    db2_ldap_pod_name: "{{ db2_ldap_pod.resources | first | json_query('metadata.name') }}"

- name: "Lookup db2 instance Pod in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    name: "c-{{ db2_instance_name | lower}}-db2u-0"
    namespace: "{{ db2_namespace }}"
  register: db2_manage_pod
  until:
    - db2_manage_pod.resources | json_query('[*].status.conditions[?type==`ContainersReady`][].status') | select ('match','True') | list | length == 1
  failed_when:
    - db2_manage_pod.resources is not defined
    - db2_manage_pod.resources | length = 0

- name: Set facts for pod name
  set_fact:
    db2_manage_pod_name: "{{ db2_manage_pod.resources | first | json_query('metadata.name') }}"

# 3. Check if user exist
# -----------------------------------------------------------------------------
- name: Lookup db2u ldap username
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "jdbc-{{ db2_instance_name | lower }}-credentials"
    namespace: "mas-{{ mas_instance_id }}-core"
  register: _db2_instance_password

- name: Get db2u ldap username and password
  no_log: true
  set_fact:
    db2_ldap_username: "{{ _db2_instance_password.resources[0].data.username | b64decode }}"
    db2_ldap_current_password: "{{ _db2_instance_password.resources[0].data.password | b64decode }}"
  when:
    - _db2_instance_password.resources is defined
    - _db2_instance_password.resources | length > 0

- name: "check if user already exists"
  ignore_errors: true
  shell: |
    oc exec -it {{ db2_manage_pod_name }} -n {{ db2_namespace }} -c db2u -- su -lc "id {{ db2_ldap_username }}"
  register: check_ldap_user

- name: "Fail if db2 user does not exists"
  when: check_ldap_user.rc != 0
  fail:
    msg: "The db2 user does not exists, please check the db2 username."

# # 4. Change LDAP user password if it exist
# # -----------------------------------------------------------------------------
- name: Generate new password
  no_log: true
  set_fact:
    db2_ldap_new_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_lowercase,ascii_uppercase,digits') }}"

- name: "Change db2 user in local LDAP registry"
  shell: |
    oc exec -it -n {{ db2_namespace }} {{ db2_ldap_pod_name }} -- /opt/ibm/ldap_scripts/changePassword.py -u {{ db2_ldap_username }} -cp {{ db2_ldap_current_password }} -np {{ db2_ldap_new_password }}
  register: creating_ldap_user_output
  when: check_ldap_user.rc == 0

# # 5. Test that the new password can connect to db2
# # -----------------------------------------------------------------------------
- name: "Test that the newly created user can connect to db2"
  no_log: true
  shell: |
    oc exec -it {{ db2_manage_pod_name }} -n {{ db2_namespace }} -c db2u -- su -lc "db2 connect to {{ db2_dbname }} user {{ db2_ldap_username }} using {{ db2_ldap_new_password }}" db2inst1
  register: db2_connect_result
  retries: 6
  delay: 20 # seconds
  until: db2_connect_result.rc == 0

- name: Update JDBC secrets
  set_fact:
    db2_ldap_password: "{{db2_ldap_new_password}}"
