---
# Task to load DBC scripts in dbc_script_path_local
- name: "Fail if mas_app_id is not provided or not supported"
  assert:
    that: mas_app_id is defined and mas_app_id|length != 0 and mas_app_id in mas_app_id_supported
    fail_msg: "mas_app_id property is required and should be one of the {{mas_app_id_supported}}"

- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

# Lookup for dbc files in the local path
- name: "Check dbc files in {{ dbc_script_path_local }} folder"
  find:
    paths: "{{ dbc_script_path_local }}"
    patterns: '*.dbc'
    file_type: "file"
  register: find_result

# Add dbc files in a list
- set_fact:
    dbc_script: "{{ dbc_script + [item | basename] }}"
  with_items: "{{ full_path }}"
  vars:
    dbc_script: [] # initializing the variable
    full_path: "{{ find_result.files | map(attribute='path') | list }}"

- name: Fail if no DBC scripts found
  assert:
    that: dbc_script is defined and dbc_script | length > 0
    fail_msg: "No DBC scripts found in {{ dbc_script_path_local }}. Exiting."

- block:

    # Filter the list of pods in the namespace to get the Manage pod details
    - name: Get Manage pod list
      kubernetes.core.k8s_info:
        namespace: "{{ manage_namespace }}"
        kind: Pod
        label_selectors:
          - "mas.ibm.com/appType=maxinstudb"
          - "mas.ibm.com/applicationId={{mas_app_id}}"
      register: _pod_list
      no_log: true

    # Get the name of the Manage pod from the pod details using jq
    - name: Get Maxinst pod name
      set_fact:
        maxinst_pod: "{{ _pod_list | json_query('resources[].metadata.name') | first }}"

    - name: "Debug information"
      debug:
        msg:
          - "Instance ID ............... {{ mas_instance_id }}"
          - "App ID .................... {{ mas_app_id }}"
          - "MAS namespace ............. {{ manage_namespace }}"
          - "MAXINST pod ............... {{ maxinst_pod }}"
          - "DBC Script path ........... {{ dbc_script_path_local }}"
          - "DBC Scripts ............... {{ dbc_script }}"

    # Copy the DBCs from localhost to the Manage pod
    - name: Copy DBC script(s) to Maxinst pod
      kubernetes.core.k8s_cp:
        namespace: "{{ manage_namespace }}"
        pod: "{{ maxinst_pod }}"
        local_path: "{{ item }}"
        remote_path: "{{ dbc_script_dir_remote }}"
      with_fileglob:
        - "{{ dbc_script_path_local }}/*"

    # Ensure that the DBC script(s) have the correct permissions on the Manage pod
    - name: Update DBC script(s) file permissions
      kubernetes.core.k8s_exec:
        namespace: "{{ manage_namespace }}"
        pod: "{{ maxinst_pod }}"
        command: "chmod +rwx {{ dbc_script_dir_remote + item }}"
      with_items:
        - "{{ dbc_script }}"

    # Load the DBC script(s) on the Manage pod
    - name: Execute DBC script(s)
      kubernetes.core.k8s_exec:
        namespace: "{{ manage_namespace }}"
        pod: "{{ maxinst_pod }}"
        command: "sh -c 'cd {{ maximo_tools_dir }}/internal/; ./runscriptfile.sh -cscript -f{{ item | split('.') | first }}'"
      with_items:
        - "{{ dbc_script }}"
      register: _execute_dbc_script

    - name: "Assert that DBC script(s) were executed successfully"
      assert:
        that:
          - "{{ _execute_dbc_script.results | length > 0 }}"
          - "{{ item.rc == 0 }}"
          - "{{ item.stdout_lines|select('equalto', 'RunScript complete: Successful')| list | length }}"
        fail_msg: "Failed to run DBC script: {{ item.stdout_lines }}"
      with_items: "{{ _execute_dbc_script.results }}"

  when: dbc_script | length > 0
