---
# 1. Check for MAS ImageContentSourcePolicy
# -----------------------------------------------------------------------------
- name: "Determine whether this is an airgap environment"
  include_tasks: "{{ role_path }}/../../common_tasks/detect_airgap.yml"

# 2. Load default storage class (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/install/determine-storage-classes.yml

- name: "UDS Deployment details"
  debug:
    msg:
      - "UDS Action ......................... {{uds_action}}"
      - "UDS Namespace ...................... ibm-common-services"
      - "UDS Storage Class .................. {{ uds_storage_class }}"
      - "UDS Event Scheduler Frequency ...... {{ uds_event_scheduler_frequency }}"
      - "UDS API Key ........................ Found in 'uds_api_key' secret under 'ibm-common-services' namespace"
      - "MAS Instance ID .................... {{ mas_instance_id | default('<undefined>', True) }}"
      - "MAS Config Directory ............... {{ mas_config_dir | default('<undefined>', True) }}"
      - "UDS Contact First Name ............. {{ uds_contact.first_name | default('<undefined>', True) }}"
      - "UDS Contact Last Name .............. {{ uds_contact.last_name | default('<undefined>', True) }}"
      - "UDS Contact e-mail ................. {{ uds_contact.email | default('<undefined>', True) }}"

# 3. Load PodTemplates configuration
# -----------------------------------------------------------------------------
- name: "Load podTemplates configuration"
  include_tasks: "{{ role_path }}/../../common_tasks/pod_templates/main.yml"
  vars:
    config_files: ["ibm-mas-bascfg.yml"]

# 4. Install Crunchy Postgres Operator (Properly)
# -----------------------------------------------------------------------------
# UDS installs the operator with a startingCSV set explicitly to 5.1.0 for some
# unknown reason, the best case scenario is that we go through needless upgrades,
# wasting time, to worst case scenario is that the upgrade path in the channel
# hits a bad version of Postgres (which is happening in December 2022)
#
# Crunchy team have "fixed" the issue by releasing a new version, but the bad
# version is still in the channel graph, so when we automatically upgrade from
# 5.1.0 we hit the bad version and are unable to install intermediate version
# 5.2.0
#
# Back-off pulling image "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961"
#
# By installing the operator first ourselves, we prevent this happening as
# the operator will already be at the latest version on the channel, and the
# startingCSV set by AnalyticsProxy will have no effect.

- name: Get postgres package manifest
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "crunchy-postgres-operator"
    namespace: openshift-marketplace # Note: A namespace must be provided when calling packages.operators.coreos.com/v1
  register: postgres_manifest

- name: Assert that PackageManifest exists
  ansible.builtin.assert:
    that:
      - postgres_manifest is defined
      - postgres_manifest.resources is defined
      - postgres_manifest.resources | length == 1
    fail_msg: "PackageManifest not found: crunchy-postgres-operator"

- name: Set the subscription information
  set_fact:
    postgres_source: "{{ postgres_manifest.resources[0].status.catalogSource }}"
    postgres_source_namespace: "{{ postgres_manifest.resources[0].status.catalogSourceNamespace }}"
    postgres_default_channel: "{{ postgres_manifest.resources[0].status.defaultChannel }}"

- name: Create Crunchy Postgres Subscription
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/crunchy-postgres/subscription.yml') }}"
    wait: yes
    wait_timeout: 120

# 5. Wait for Postgres Operator to be Ready
# -----------------------------------------------------------------------------
- name: "Wait for Crunchy Postgres operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: pgo
    namespace: ibm-common-services
    kind: Deployment
  register: pgo_deployment
  until: pgo_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 6. Install UDS Operator
# -----------------------------------------------------------------------------
- name: Install Foundation Services ibm-user-data-services operand request
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/ibm-user-data-services.yml') }}"
    wait: yes
    wait_timeout: 120

# 7. Wait for UDS Operator to be Ready
# -----------------------------------------------------------------------------
- name: "Wait for Foundation Services ibm-user-data-services operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: user-data-services-operator
    namespace: ibm-common-services
    kind: Deployment
  register: uds_deployment
  until: uds_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 8. Create UDS AnalyticsProxy
# -----------------------------------------------------------------------------
- name: "Create UDS AnalyticsProxy"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/analyticsproxy.yaml') }}"

# Note that the AnalyticsProxy references a 'uds-images-pull-secret', but we do not create this.
# For some reason it seems to work anyway.

# 9. Wait for the UDS AnalyticsProxy to be ready
# -----------------------------------------------------------------------------
- name: "Wait for the AnalyticsProxy to be ready"
  kubernetes.core.k8s_info:
    api_version: uds.ibm.com/v1
    name: analyticsproxy
    namespace: "ibm-common-services"
    kind: AnalyticsProxy
  register: uds_ap_cr_lookup
  until:
    - uds_ap_cr_lookup.resources is defined and uds_ap_cr_lookup.resources | length == 1
    - uds_ap_cr_lookup.resources[0].status is defined
    - uds_ap_cr_lookup.resources[0].status.phase is defined
    - uds_ap_cr_lookup.resources[0].status.phase == 'Ready'
  retries: 30 # approx 1 hour (!!) before we give up waiting for status.phase to be Ready
  delay: 120 # 2 minutes

# 10. Create the GenerateKey CR
# -----------------------------------------------------------------------------
- name: "Create UDS Generate Key"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/foundation-services/generateKey.yaml') }}"

# 11. Wait for GenerateKey to be complete
# -----------------------------------------------------------------------------
- name: "Wait for GenerateKey to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: uds.ibm.com/v1
    name: uds-api-key
    namespace: ibm-common-services
    kind: GenerateKey
  register: uds_gk_result
  until:
    - uds_gk_result.resources is defined and uds_gk_result.resources | length == 1
    - uds_gk_result.resources[0].status is defined
    - uds_gk_result.resources[0].status.phase is defined
    - uds_gk_result.resources[0].status.phase == 'Ready'
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute

# 12. MAS Config
# -----------------------------------------------------------------------------
# Note that the MAS config resource still refers to UDS by its
# original name (BAS).  It would be a breaking change to re-name the MAS CRD
- name: "Create MAS BasCfg resource definition"
  include_tasks: tasks/install/udscfg.yml
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - uds_contact.first_name is defined and uds_contact.first_name != ""
    - uds_contact.last_name is defined and uds_contact.last_name != ""
    - uds_contact.email is defined and uds_contact.email != ""
